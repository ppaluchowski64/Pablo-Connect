on:
  push:
    branches: [ "all" ]
  pull_request:
    branches: [ "all" ]

jobs:
  build:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: Install Conan
        uses: conan-io/setup-conan@v1

      - name: Create default Conan profile
        run: conan profile detect --force

      - name: Install Conan deps and generate presets
        run: conan install . --output-folder=build --build=missing -g CMakeToolchain -g CMakeDeps -s compiler.cppstd=20 -s build_type=Release

      - name: Configure CMake (conan-release)
        if: runner.os != 'Windows'
        run: cmake --preset conan-release

      - name: Configure CMake (conan-default)
        if: runner.os == 'Windows'
        run: cmake --preset conan-default

      - name: Build
        run: cmake --build --preset conan-release

      - name: Package build artifacts (non-Windows)
        if: runner.os != 'Windows'
        run: |
          cd build
          zip -r "../${{ github.ref_name }}-build-${{ matrix.os }}.zip" .

      - name: Package build artifacts (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path build\* -DestinationPath "${{ github.ref_name }}-build-${{ matrix.os }}.zip"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}-build-${{ matrix.os }}
          path: ${{ github.ref_name }}-build-${{ matrix.os }}.zip